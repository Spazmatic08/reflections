What happens when you initialize a repository? Why do you need to do it?

    When you initialize a repository, the .git file is added to it
    automatically. This signifies that the group of files 
    included are to form a git repository, with all the capabilities
    attributed to it. 

How is the staging area different from the working directory and the 
repository? What value do you think it offers?

    It's a simple concept to add additional functionality to the use
    of commits. The staging area dictates what changes are stored in
    the next commit, and which are not. It makes it easier to work 
    on multiple issues at once, for one. 

How can you use the staging area to make sure you have one commit per
logical change?

    Simple - only use the add command on files whose changes you feel
    are ready for a commit. 

What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

    Some changes are better made a series of other logical changes that
    don't fit well as a single commit. An experimental feature, for 
    instance. Splitting a seperate branch for that feature would let 
    you work on the feature while still hunting down bugs in the base 
    code.

How do the diagrams help you visualize the branch structure?

    You can easily see which commit a given branch was established on,
    and note that the master branch remains independent of the changes
    made in the branches.

