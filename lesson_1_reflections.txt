How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It pinpointed any locations in the file that changed. I didn't 
    have to trawl the source code manually.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    For one, having the ability to easily review old versions of code makes
    reverting far more viable, and studious enough use provides a valuable
    barrier against errors of all kinds.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Manual commits run the risk of failing to use sufficiently frequent saves,
    which could result in loss of work. On the other hand, you have far fewer
    redundant and unnecessary saves that a diligent auto-saver would procide,
    preventing you from wasting time looking through the massive variety of
    near identical saves.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    It's context. Google Docs rarely have files that directly interact with each
    other, but a larger project - and most typical code projects - tend to have
    several codependent files. It's more often necessary to make changes across
    multiple files at once for a code project than with most other documents.

How can you use the commands git log and git diff to view the history of files?

    Use log to create a copy of the current file's code, and diff to compare it
    to future changes later on.

How might using version control make you more confident to make changes that
could break something?

    Version control offers an important 'undo' option that mitigates 
    the potential damage caused by a bad edit.

Now that you have your workspace set up, what do you want to try using Git for?

    Coding more efficiently and quickly. Right now, the biggest hurdle
    is the time it takes to correct bad code. Version control will help
    me bypass these issues.

How could having easy access to the entire history of a file make you a more 
efficient programmer in the long term?

    You already asked this.